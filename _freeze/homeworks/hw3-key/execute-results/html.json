{
  "hash": "5709b9a1ae14424d891eec34efcfe66c",
  "result": {
    "markdown": "---\ntitle: \"Homework 3\"\nauthor: \"Your Name Here\"\nformat: html\nexecute: \n  error: true\n  message: false\n  warning: false\n---\n\n\n\n\n1.  Load the `{tidyverse}`, `{ggridges}`, and `{ISLR}` packages in the \"setup\" chunk. (Install any if needed.)\n\n2.  Run the following lines of code to read about and view the data we'll use for this lab.\n\n-   Comment out line 32 after you run it, but putting a `#` at the start of the line.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(gss_cat)\nView(gss_cat)\n?gss_cat\n```\n:::\n\n\n3.  Use `{ggplot2}` to create a histogram of `tvhours`. The plot should:\n\n-   Include a small amount of transparency so grid lines are visible under the histogram.\n-   Be a different color than the default\n-   Include meaningful axis labels\n-   Have a title and a subtitle\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(theme_minimal())\n\nggplot(gss_cat, aes(tvhours)) +\n  geom_histogram(fill = \"cornflowerblue\", \n                 alpha = 0.7) +\n  labs(x = \"Number of Hours Watching Television\",\n       y = \"Number of Observations\",\n       title = \"Distribution of Television Watching\",\n       subtitle = \"Data from the General Social Survey (http://gss.norc.org)\")\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/question-3-1.png){width=672}\n:::\n:::\n\n\n4.  Create a ridgeline density plot of `age` by `partyid`. Do you notice any strong differences by party affiliation?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(age, partyid)) +\n  geom_density_ridges(fill = \"cornflowerblue\", alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/question-4-1.png){width=672}\n:::\n:::\n\n\n5.  Modify the plot from Question 4 to produce separate ridgeline densities by `race` within one plot. Do you see any patterns?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(age, partyid)) +\n  geom_density_ridges(aes(fill = race), alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/question-5-1.png){width=672}\n:::\n:::\n\n\n6.  Replicate the plots from Questions 4 and 5, but this time displaying the relations with boxplots (i.e., one boxplot from Question 4 and one boxplot for Question 5 in the chunk below). Try using `coord_flip`. Which do you think displays the relation more clearly? Why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(partyid, age)) +\n  geom_boxplot(fill = \"cornflowerblue\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/boxplots-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(gss_cat, aes(partyid, age)) +\n  geom_boxplot(aes(fill = race), alpha = 0.4) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/boxplots-2.png){width=672}\n:::\n:::\n\n\n7.  Run the following lines of code to get a correlation table as a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor_tbl <- Hitters %>% \n  select_if(is.numeric) %>% \n  cor(use = \"pairwise.complete.obs\") %>% \n  as.data.frame() %>% \n  mutate(row = row.names(.)) %>% \n  gather(col, cor, -row) %>% \n  tbl_df()\n```\n:::\n\n\nUse the correlation table to create a heatmap using `geom_tile`. Change the colors to one of the four `viridis` palettes. What does the heatmap help you see?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cor_tbl, aes(row, col, fill = cor)) +\n  geom_tile() +\n  scale_fill_viridis_c(option = \"inferno\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/heatmap-1.png){width=672}\n:::\n:::\n\n\n7.  The code in the \"barplot1\" chunk below will produce a barplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(rincome)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/barplot1-1.png){width=672}\n:::\n:::\n\n\nUse the code below to create a new data set - `gss_cat_new` - that redefines the `rincome` variable so that *Not applicable* is displayed first, followed by *No answer*, *Don't know*, *Refused*, and then each income category from lowest to highest. Once you've redefined the factor variable, re-produce the plot above by running the `ggplot` code at the bottom of the chunk. The plot should have *Not applicable* closest to the *y*-axis, then *No answer*, *Don't know*, etc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat_new <- gss_cat %>% \n  mutate(rincome = factor(rincome, levels = c(\"Not applicable\",\n                                              \"No answer\",\n                                              \"Don't know\",\n                                              \"Refused\",\n                                              \"Lt $1000\",\n                                              \"$1000 to 2999\",\n                                              \"$3000 to 3999\",\n                                              \"$4000 to 4999\",\n                                              \"$5000 to 5999\",\n                                              \"$6000 to 6999\",\n                                              \"$7000 to 7999\",\n                                              \"$8000 to 9999\",\n                                              \"$10000 - 14999\",\n                                              \"$15000 - 19999\",\n                                              \"$20000 - 24999\",\n                                              \"$25000 or more\")))\nggplot(gss_cat_new, aes(rincome)) +\n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](hw3-key_files/figure-html/redefine-factor-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "hw3-key_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}