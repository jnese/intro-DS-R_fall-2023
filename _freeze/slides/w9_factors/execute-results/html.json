{
  "hash": "5e621f0b730e60b4e10a34f8098a33c4",
  "result": {
    "markdown": "---\ntitle: \"Week 9: Factors &<br>Pull Requests\"\nsubtitle: \"Miscellany\"\nauthor: \"Joe Nese\"\ninstitute: \"University of Oregon<br>Fall 2023\"\nformat:\n  revealjs: \n    theme: default\n    highlight-style: github\n    incremental: false\n    fig-width: 9\n    fig-height: 3.5\n    scrollable: true\n    multiplex: true\nexecute: \n  echo: true\n  warning: false\nembed-resources: true\n---\n\n\n\n\n\n![](./images/student-experience-surveys-slide.png)\n\n\n# Factors & Pull Requests \n\nWeek 9\n\n## Agenda {.smaller}\n\n* Quick note on `ggplot()`: `group =`\n* Final Project Review\n* Discuss factors and factor re-leveling\n* Walk through a [pull request (PR)]{style='color:#009E73'}\n* AMA\n\n**Overall Purpose**\n\n* Understand factors and how to manipulate them\n* Understand how to complete a [pull request (PR)]{style='color:#009E73'}\n\n## `group = `\n\n* You saw my code where `geom_line(group = 1)`\n\n* The `group` argument expects a column from your data **not** a number\n\n* use the `group` aesthetic to map a different geom for each level in a factor\n    + similar to `color` and `fill` but without the physicla characteristic\n\n## Homework 8\n\n![](https://media2.giphy.com/media/8X6UFXpJFndo4/giphy.gif?cid=ecf05e47ov2j4bec7wwcp7el1ob0b0oe7towmyta3ml46kvz&rid=giphy.gif&ct=g)\n\n# Final Project\n\n\n## Final Project - Data Prep Script\n\n* Expected to be a work in progress\n* Provided to your peers so they can learn from you as much as you can learn from their feedback\n\n**Peer Review**\n\n* Understand the purpose of the exercise\n* Conducted as a professional product\n* Should be **very** encouraging \n* Zero tolerance policy for inappropriate comments\n\n## Final Project – Presentation\n\n* Groups are expected to present for about **15 minutes** (split evenly among members). Group order randomly assigned. \n\n* Email me your presentation by midnight 11/28 so I can share through my machine.\n\n## Final Project – Presentation\n\n<b>Presentation cover the following:</b>\n\n* Share your journey (everyone, at least for a minute or two)\n* Discuss challenges you had along the way\n* Celebrate your successes\n* Discuss challenges you are still facing\n* Discuss substantive findings\n* Show off your cool figures!\n* Discuss next `R` hurdle you want to address\n\n## Final Project – Paper {.smaller}\n\n* Quarto document\n    + Abstract, Intro, Methods, Results, Discussion, References\n    + Should be brief: 3,500 words max \n* No code displayed - should look similar to a manuscript being submitted for publication\n* Include at least 1 table\n* Include at least 2 plots\n* Should be fully open, reproducible, and housed on GitHub\n    + I should be able to clone your repository, open the R Studio Project, and reproduce the full manuscript (by rendering the quarto doc)\n\n## Final Project\n\nThe following functions: \n\n* `pivot_longer()`\n* `mutate()`\n* `select()`\n* `filter()`\n* `pivot_wider()`\n* `group_by()`\n* `summarize()`\n\n## Scoring Rubric\n\nCheck the [syllabus](https://jnese.github.io/intro-DS-R_fall-2023/syllabus.html) for Presentation and Final Paper scoring rubrics\n\n\n# Factors\n\njust the basics\n\n## When do we really want factors?\n\nGenerally two reasons to declare a factor\n\n1. Only finite number of categories\n    + treatment/control\n    + income categories\n    + performance levels\n    + etc.\n  \n2. Use in modeling\n\n## Creating factors {.smaller}\n\nImagine you have a vector of months\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonths_4 <- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n```\n:::\n\n\n. . .\n\nWe could store this as a string, but there are issues with this:\n\n* There are only 12 possible months\n    + factors will help us weed out values that don't conform to our predefined levels, which helps safeguard against typos, etc.\n* You can't sort this vector in a meaningful way\n    + default is alphabetic sorting\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(months_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Apr\" \"Dec\" \"Jan\" \"Mar\"\n```\n:::\n:::\n\n\n## Define it as a factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonths_4 <- factor(months_4, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\nmonths_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\n. . .\n\nNow we can sort\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(months_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Jan Mar Apr Dec\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\n## Accessing and modifying levels {.smaller}\n\nUse the `levels()` function\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(months_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\"\n```\n:::\n:::\n\n\n## Provides an error check of sorts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonths_4[5] <- \"Jam\"\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in `[<-.factor`(`*tmp*`, 5, value = \"Jam\"): invalid factor level, NA\ngenerated\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonths_4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec  Apr  Jan  Mar  <NA>\nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n```\n:::\n:::\n\n\n## What if we don’t specify levels?\n\nIf you define a factor without specifying the levels, it will assign them alphabetically\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnths <- factor(c(\"Dec\", \"Apr\", \"Jan\", \"Mar\"))\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Apr Dec Jan Mar\n```\n:::\n:::\n\n\n## [`{forcats}`](https://forcats.tidyverse.org/) ![](https://raw.githubusercontent.com/tidyverse/forcats/master/man/figures/logo.png){width=\"10%\"}\n\n* When working with factors, we can use the `{forcats}` package\n    + `for cat`egorical variables\n    + anagram of factors\n  \n. . .\n\n* Part of the `{tidyverse}` so should be good to go\n\n. . .\n\n* All functions start with `fct_`\n    + use the autofill in RStudio\n\n## Change level order – `fct_inorder()`\n\nBy the order in which they first appear\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mnths <- factor(c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Apr Dec Jan Mar\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnths %>% \n  factor(., levels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\")) %>% \n  sort(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Jan Mar Apr Dec\nLevels: Jan Mar Apr Dec\n```\n:::\n:::\n\n\n## Change level order – `fct_inorder()`\n\nBy the order in which they first appear\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mnths <- factor(c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Apr Dec Jan Mar\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nmnths %>% \n  factor(., levels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\")) %>% \n  fct_inorder() %>%\n  sort(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Dec Apr Jan Mar\nLevels: Dec Apr Jan Mar\n```\n:::\n:::\n\n\n## Change level order – `fct_infreq()`\n\nBy number of observations with each level (largest first)\n \n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nc(\"b\", \"b\", \"c\", \"a\", \"a\", \"a\") %>% \n    fct_infreq() #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] b b c a a a\nLevels: a b c\n```\n:::\n:::\n\n\n. . .\n\nThis can be **especially** useful for plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(aes(x, fct_infreq(y))\n```\n:::\n\n\n\n## Investigate factors\n\n* `{tidyverse}` gives you convenient way to evaluate factors\n    + `count()`\n    + `geom_bar()` or `geom_col())` with `{ggplot2}`\n* But don't forget about the base function `unique()`\n    + e.g., `unique(df$factor_variable)`\n\n## General Social Survey (GSS)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nforcats::gss_cat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21,483 × 9\n    year marital         age race  rincome        partyid    relig denom tvhours\n   <int> <fct>         <int> <fct> <fct>          <fct>      <fct> <fct>   <int>\n 1  2000 Never married    26 White $8000 to 9999  Ind,near … Prot… Sout…      12\n 2  2000 Divorced         48 White $8000 to 9999  Not str r… Prot… Bapt…      NA\n 3  2000 Widowed          67 White Not applicable Independe… Prot… No d…       2\n 4  2000 Never married    39 White Not applicable Ind,near … Orth… Not …       4\n 5  2000 Divorced         25 White Not applicable Not str d… None  Not …       1\n 6  2000 Married          25 White $20000 - 24999 Strong de… Prot… Sout…      NA\n 7  2000 Never married    36 White $25000 or more Not str r… Chri… Not …       3\n 8  2000 Divorced         44 White $7000 to 7999  Ind,near … Prot… Luth…      NA\n 9  2000 Married          44 White $25000 or more Not str d… Prot… Other       0\n10  2000 Married          47 White $25000 or more Strong re… Prot… Sout…       3\n# ℹ 21,473 more rows\n```\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   partyid                n\n   <fct>              <int>\n 1 No answer            154\n 2 Don't know             1\n 3 Other party          393\n 4 Strong republican   2314\n 5 Not str republican  3032\n 6 Ind,near rep        1791\n 7 Independent         4119\n 8 Ind,near dem        2499\n 9 Not str democrat    3690\n10 Strong democrat     3490\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(gss_cat$partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"No answer\"          \"Don't know\"         \"Other party\"       \n [4] \"Strong republican\"  \"Not str republican\" \"Ind,near rep\"      \n [7] \"Independent\"        \"Ind,near dem\"       \"Not str democrat\"  \n[10] \"Strong democrat\"   \n```\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(gss_cat$partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] Ind,near rep       Not str republican Independent        Not str democrat  \n [5] Strong democrat    Ind,near dem       Strong republican  Other party       \n [9] No answer          Don't know        \n10 Levels: No answer Don't know Other party ... Strong democrat\n```\n:::\n:::\n\n\n. . .\n\nHow many `unique` categories are there (if you have a lot)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(gss_cat$partyid))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(partyid)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-21-1.png){width=864}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(fct_infreq(partyid))) +\n    geom_bar()\n```\n:::\n\n\nggplot(gss_cat, aes([fct_infreq(]{style='color:#CC79A7'}partyid[)]{style='color:#CC79A7'})) +\n  geom_bar()\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-23-1.png){width=864}\n:::\n:::\n\n\n\n## Change level order – `fct_relevel()`\n\nChange level order by hand, or move any number of levels to any location\n  + *probably one I use most*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfct_relevel(variable_name, \n            \"first_level\", \n            \"second_level\", \n            \"third_level\", \n            ...)\n```\n:::\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\nfct_relevel(variable_name, \n            \"fourth_level\", \n            after = 3)\n```\n:::\n\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3|4\"}\nset.seed(3000)\ntibble(\n month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"),\n suspensions = sample(c(5:75), size = 10)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 2\n   month suspensions\n   <chr>       <int>\n 1 Jan            19\n 2 Feb            51\n 3 Mar            61\n 4 Apr            14\n 5 May            25\n 6 Jun            27\n 7 Sep            15\n 8 Oct            21\n 9 Nov             7\n10 Dec            59\n```\n:::\n:::\n\n\n##\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|6,7\"}\nset.seed(3000)\ntibble(\n month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"),\n suspensions = sample(c(5:75), size = 10)\n) %>% \n  ggplot(aes(month, suspensions)) +\n  geom_col() \n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-27-1.png){width=864}\n:::\n:::\n\n\n##\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|6|7\"}\nset.seed(3000)\ntibble(\n month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"),\n suspensions = sample(c(5:75), size = 10)\n) %>% \n  mutate(month = fct_relevel(month, \n                    \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\")) \n```\n:::\n\n\n##\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|8,9\"}\nset.seed(3000)\ntibble(\n month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"),\n suspensions = sample(c(5:75), size = 10)\n) %>% \n  mutate(month = fct_relevel(month,\n                    \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\")) %>% \n  ggplot(aes(month, suspensions)) + \n  geom_col() \n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-29-1.png){width=864}\n:::\n:::\n\n\n## Change level order – `fct_reorder()`\n\nReorder according to another variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(relig_summary <- gss_cat %>%\n  group_by(relig) %>%\n  summarise(tvhours = mean(tvhours, na.rm = TRUE),\n            n = n()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 3\n   relig                   tvhours     n\n   <fct>                     <dbl> <int>\n 1 No answer                  2.72    93\n 2 Don't know                 4.62    15\n 3 Inter-nondenominational    2.87   109\n 4 Native american            3.46    23\n 5 Christian                  2.79   689\n 6 Orthodox-christian         2.42    95\n 7 Moslem/islam               2.44   104\n 8 Other eastern              1.67    32\n 9 Hinduism                   1.89    71\n10 Buddhism                   2.38   147\n11 Other                      2.73   224\n12 None                       2.71  3523\n13 Jewish                     2.52   388\n14 Catholic                   2.96  5124\n15 Protestant                 3.15 10846\n```\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(relig_summary, aes(tvhours, relig)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-31-1.png){width=864}\n:::\n:::\n\n\n##\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) + \n  geom_point()\n```\n:::\n\n\nggplot(relig_summary, aes(tvhours, [fct_reorder(]{style='color:#CC79A7'}relig, [tvhours)]{style='color:#CC79A7'})) + \n  geom_point()\n  \n. . .\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-33-1.png){width=864}\n:::\n:::\n\n\n## Or `mutate()` the factor reorder\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nrelig_summary %>% \n  mutate(relig = fct_reorder(relig, tvhours)) %>% \n  ggplot(aes(tvhours, relig)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-34-1.png){width=864}\n:::\n:::\n\n\n## Quick aside for error bars\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3|4,5|6\"}\n(relig_summary_eb <- gss_cat %>%\n  group_by(relig) %>%\n  summarise(tvhours_mean = mean(tvhours, na.rm = TRUE),\n            tvhours_se   = sqrt(var(tvhours, na.rm = TRUE) / \n                                  length(na.omit(tvhours))),\n            n = n()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 4\n   relig                   tvhours_mean tvhours_se     n\n   <fct>                          <dbl>      <dbl> <int>\n 1 No answer                       2.72     0.326     93\n 2 Don't know                      4.62     3.01      15\n 3 Inter-nondenominational         2.87     0.363    109\n 4 Native american                 3.46     1.13      23\n 5 Christian                       2.79     0.126    689\n 6 Orthodox-christian              2.42     0.355     95\n 7 Moslem/islam                    2.44     0.269    104\n 8 Other eastern                   1.67     0.449     32\n 9 Hinduism                        1.89     0.197     71\n10 Buddhism                        2.38     0.235    147\n11 Other                           2.73     0.203    224\n12 None                            2.71     0.0590  3523\n13 Jewish                          2.52     0.151    388\n14 Catholic                        2.96     0.0453  5124\n15 Protestant                      3.15     0.0360 10846\n```\n:::\n:::\n\n\n## Quick aside for error bars\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3,4,5|6\"}\nggplot(relig_summary_eb, \n       aes(tvhours_mean, fct_reorder(relig, tvhours_mean))) + \n  geom_errorbarh(aes(xmin = tvhours_mean - 1.96 * tvhours_se,\n                     xmax = tvhours_mean + 1.96 * tvhours_se),\n                 color = \"cornflowerblue\") +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-36-1.png){width=864}\n:::\n:::\n\n\n## Modifying factor levels – `fct_recode()`\n\nMake modifying factors more explicit\n\n`fct_recode(var_name, \"new level\" = \"old level\"...`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2,3,4,5,6,7\"}\ngss_cat %>%\n  mutate(partyid = fct_recode(partyid,\n    \"Republican, strong\" = \"Strong republican\", \n    \"Republican, weak\" = \"Not str republican\", \n    \"Independent, near rep\" = \"Ind, near rep\", \n    \"Independent, near dem\" = \"Ind, near dem\", \n    \"Democrat, weak\" = \"Not str democrat\", \n    \"Democrat, strong\" = \"Strong democrat\")) %>% \n  count(partyid)\n```\n:::\n\n\n## Collapsing levels – `fct_recode()` {.smaller}\n\n`fct_recode()` can also be used to collapse levels easily\n\n\n::: {.cell output-location='fragment'}\n\n```{.r .cell-code  code-line-numbers=\"|9,10,11\"}\ngss_cat %>%\n  mutate(partyid = fct_recode(partyid,\n    \"Republican, strong\"    = \"Strong republican\",\n    \"Republican, weak\"      = \"Not str republican\",\n    \"Independent, near rep\" = \"Ind,near rep\",\n    \"Independent, near dem\" = \"Ind,near dem\",\n    \"Democrat, weak\"        = \"Not str democrat\",\n    \"Democrat, strong\"      = \"Strong democrat\",\n    \"Other\"                 = \"No answer\", \n    \"Other\"                 = \"Don't know\", \n    \"Other\"                 = \"Other party\")) %>% \n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  partyid                   n\n  <fct>                 <int>\n1 Other                   548\n2 Republican, strong     2314\n3 Republican, weak       3032\n4 Independent, near rep  1791\n5 Independent            4119\n6 Independent, near dem  2499\n7 Democrat, weak         3690\n8 Democrat, strong       3490\n```\n:::\n:::\n\n\n## Collapsing levels – `fct_collapse()` {.smaller}\n\n`fct_collapse()` is one of the more useful functions in `{forcats}`\n\n* Collapse all categories into Republican, Democrat, Independent, or Other\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\ngss_cat %>%\n  mutate(partyid = fct_collapse(partyid, \n    \tOther = c(\"No answer\", \"Don't know\", \"Other party\"),\n    \tRep = c(\"Strong republican\", \"Not str republican\"),\n    \tInd = c(\"Ind,near rep\", \"Independent\", \"Ind,near dem\"),\n    \tDem = c(\"Not str democrat\", \"Strong democrat\")\n  )) %>%\n  count(partyid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  partyid     n\n  <fct>   <int>\n1 Other     548\n2 Rep      5346\n3 Ind      8409\n4 Dem      7180\n```\n:::\n:::\n\n\n## Collapsing levels – `fct_lump_?()`\n\n`fct_lump_?()` – \"lump\" a bunch of categories together\n\n`fct_lump_n(factor_variable, n)`\n: lumps all levels except for the `n` most frequent (or least frequent if `n` < 0) into \"Other\" level\n\n. . .\n\n`fct_lump_min(factor_variable, min)`\n: lumps levels that appear fewer than `min` times\n\n. . .\n\n`fct_lump_prop(factor_variable, prop)`\n: lumps levels that appear in fewer `prop` $\\times$ `n` times\n\n## Collapsing levels – `fct_lump_n()`\n\nCollapse to `n = 9` religious groups: top 8 groups plus \"Other\"\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\ngss_cat %>% \n  mutate(rel = fct_lump_n(relig, 9)) %>% \n  count(rel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  rel                         n\n  <fct>                   <int>\n1 Inter-nondenominational   109\n2 Christian                 689\n3 Moslem/islam              104\n4 Buddhism                  147\n5 None                     3523\n6 Jewish                    388\n7 Catholic                 5124\n8 Protestant              10846\n9 Other                     553\n```\n:::\n:::\n\n\n## Collapsing levels – `fct_lump_min()`\n\nCollapse to all religious groups that appear less than `min = 200` into \"Other\"\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\ngss_cat %>% \n  mutate(rel = fct_lump_min(relig, min = 200)) %>% \n  count(rel) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  rel            n\n  <fct>      <int>\n1 Christian    689\n2 None        3523\n3 Jewish       388\n4 Catholic    5124\n5 Protestant 10846\n6 Other        913\n```\n:::\n:::\n\n\n## Collapsing levels – `fct_lump_prop()`\n\nCollapse to all religious groups that appear less than `prop = 10%` into \"Other\"\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\ngss_cat %>% \n  mutate(rel = fct_lump_prop(relig, prop = .10)) %>% \n  count(rel) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  rel            n\n  <fct>      <int>\n1 None        3523\n2 Catholic    5124\n3 Protestant 10846\n4 Other       1990\n```\n:::\n:::\n\n\n## Missing levels {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(gss_cat$race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Other\"          \"Black\"          \"White\"          \"Not applicable\"\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngss_cat %>% \n  count(race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  race      n\n  <fct> <int>\n1 Other  1959\n2 Black  3129\n3 White 16395\n```\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(gss_cat$race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n         Other          Black          White Not applicable \n          1959           3129          16395              0 \n```\n:::\n:::\n\n\n## Missing levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gss_cat, aes(race)) +\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-46-1.png){width=864}\n:::\n:::\n\n\n## Missing levels\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nggplot(gss_cat, aes(race)) +\n    geom_bar() +\n    scale_x_discrete(drop = FALSE) \n```\n\n::: {.cell-output-display}\n![](w9_factors_files/figure-revealjs/unnamed-chunk-47-1.png){width=864}\n:::\n:::\n\n\n## Review\n\n`fct_inorder()`\n: By the order in which they first appear\n\n. . .\n\n`fct_infreq()`\n: By number of observations with each level (largest first)\n\n. . .\n\n`fct_relevel()`\n: Change level order by hand, or move any number of levels to any location\n\n. . .\n\n`fct_reorder()`\n: Change level order according to another variable\n\n. . .\n\n`fct_recode()`\n: Recode levels into new named levels\n\n. . .\n\n`fct_collapse()` \n: Collapse many levels into fewer levels\n\n. . .\n\n`fct_lump_?()`\n: Recode all levels into \"*Other*\":\n\n* except for the `n` most frequent - `fct_lump_n()`\n* that appear fewer than `min` times - `fct_lump_min()`\n* that appear less than `prop`% - `fct_lump_prop()`\n\n# Revisiting git\n\n## Let's revisit git\n\nTalk with neighbor. What do these terms mean?\n\nTalk about them in the order you would encounter them in your workflow \n\n* [clone]{style='color:#009E73'}\n* [pull]{style='color:#009E73'}\n* [stage]{style='color:#009E73'}\n* [commit]{style='color:#009E73'}\n* [push]{style='color:#009E73'}\n* [repo]{style='color:#009E73'}\n* [remote]{style='color:#009E73'}\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_2575f24c\" data-warn-when=\"30\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n# Pull Requests \n\n## Peer Review of Data Prep Script {.smaller}\n\nExpectations\n\nFeedback:\n\n1. Note <u>at least three</u> areas of strength\n2. Note <u>at least one</u> thing you learned from reviewing their script\n3. Note <u>at least one and no more than three</u> areas for improvement\n\n. . .\n\nMaking your code publicly available can feel daunting \n\n* The purpose of this portion of the final project is to help us all learn from each other\n* We are all learning\n    + Be constructive in your feedback\n    + Be kind\n* Under no circumstances will negative comments be tolerated \n    + Any comments that could be perceived as negative, and outside the scope of the code, will result in an immediate score of zero\n  \n## Peer Review GitHub Process {.smaller}\n\n1. Locate GitHub [repo]{style='color:#009E73'} of assigned peer to review\n2. Fork the [repo]{style='color:#009E73'}\n3. Clone the [repo]{style='color:#009E73'}\n4. Provide script feedback\n    + edit the .qmd file directly\n    + edit code\n    + provide comments in code and/or text (`Ctrl/Command + Shift + C`)\n    + [commit]{style='color:#009E73'} & [push]{style='color:#009E73'}\n\n5. Create [Pull Request (PR)]{style='color:#009E73'}\n\n* Write brief summary of the PR that includes\n  + \\>= 3 strengths\n  + \\>= 1 thing you learned\n  + 1 to 3 three areas of improvement\n\n## 1. Locate GitHub repo of assigned peer to review {.smaller}\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"font-size: 12px; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Student </th>\n   <th style=\"text-align:left;\"> Repo to Review </th>\n   <th style=\"text-align:left;\"> File to Review </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Audrey Sileci </td>\n   <td style=\"text-align:left;\"> https://github.com/andrewcastil/finalproject </td>\n   <td style=\"text-align:left;\"> Final_project.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Avery Turner </td>\n   <td style=\"text-align:left;\"> https://github.com/jabunquin/edld651_finalproject/tree/main/scripts </td>\n   <td style=\"text-align:left;\"> finalproject.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Tracy Zehner </td>\n   <td style=\"text-align:left;\"> https://github.com/francesyess/EDLD651_final_v2 </td>\n   <td style=\"text-align:left;\"> edld651_final_v2.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Xiaoqi Ma </td>\n   <td style=\"text-align:left;\"> https://github.com/apedraza1234/socialfear.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Danielle Jones </td>\n   <td style=\"text-align:left;\"> https://github.com/pfingston/data_final.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Katie Perez </td>\n   <td style=\"text-align:left;\"> https://github.com/jabunquin/edld651_finalproject/tree/main/scripts </td>\n   <td style=\"text-align:left;\"> finalproject.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alejandra Pedraza </td>\n   <td style=\"text-align:left;\"> https://github.com/francesyess/EDLD651_final_v2 </td>\n   <td style=\"text-align:left;\"> edld651_final_v2.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Jamie Yang </td>\n   <td style=\"text-align:left;\"> https://github.com/pfingston/data_final.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Shannan Stoll </td>\n   <td style=\"text-align:left;\"> https://github.com/tracy-zehner/SubstanceAI.git </td>\n   <td style=\"text-align:left;\"> SubstanceAI.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Alexus Rock </td>\n   <td style=\"text-align:left;\"> https://github.com/jabunquin/edld651_finalproject/tree/main/scripts </td>\n   <td style=\"text-align:left;\"> finalproject.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ben Pfingston </td>\n   <td style=\"text-align:left;\"> https://github.com/francesyess/EDLD651_final_v2 </td>\n   <td style=\"text-align:left;\"> edld651_final_v2.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Leah Peterson </td>\n   <td style=\"text-align:left;\"> https://github.com/ddjones-slp/final_project_651.git </td>\n   <td style=\"text-align:left;\"> Final Project DJ Clean Data.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Elyse Calhoun </td>\n   <td style=\"text-align:left;\"> https://github.com/tracy-zehner/SubstanceAI.git </td>\n   <td style=\"text-align:left;\"> SubstanceAI.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Eunji Kong </td>\n   <td style=\"text-align:left;\"> https://github.com/apedraza1234/socialfear.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Frances Pinkham </td>\n   <td style=\"text-align:left;\"> https://github.com/pfingston/data_final.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Yitong Jiang </td>\n   <td style=\"text-align:left;\"> https://github.com/andrewcastil/finalproject </td>\n   <td style=\"text-align:left;\"> Final_project.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Faria Shaikh </td>\n   <td style=\"text-align:left;\"> https://github.com/andrewcastil/finalproject </td>\n   <td style=\"text-align:left;\"> Final_project.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Nafisul Huq </td>\n   <td style=\"text-align:left;\"> https://github.com/tracy-zehner/SubstanceAI.git </td>\n   <td style=\"text-align:left;\"> SubstanceAI.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ben Bunquin </td>\n   <td style=\"text-align:left;\"> https://github.com/apedraza1234/socialfear.git </td>\n   <td style=\"text-align:left;\"> manuscript.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Andrew Castillo </td>\n   <td style=\"text-align:left;\"> https://github.com/francesyess/EDLD651_final_v2 </td>\n   <td style=\"text-align:left;\"> edld651_final_v2.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Ania Grudzien </td>\n   <td style=\"text-align:left;\"> https://github.com/tracy-zehner/SubstanceAI.git </td>\n   <td style=\"text-align:left;\"> SubstanceAI.qmd </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Kayla McComb </td>\n   <td style=\"text-align:left;\"> https://github.com/ddjones-slp/final_project_651.git </td>\n   <td style=\"text-align:left;\"> Final Project DJ Clean Data.qmd </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-957d2d6b61aac29e1ea0\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-957d2d6b61aac29e1ea0\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\"],[\"Audrey Sileci\",\"Avery Turner\",\"Tracy Zehner\",\"Xiaoqi Ma\",\"Danielle Jones\",\"Katie Perez\",\"Alejandra Pedraza\",\"Jamie Yang\",\"Shannan Stoll\",\"Alexus Rock\",\"Ben Pfingston\",\"Leah Peterson\",\"Elyse Calhoun\",\"Eunji Kong\",\"Frances Pinkham\",\"Yitong Jiang\",\"Faria Shaikh\",\"Nafisul Huq\",\"Ben Bunquin\",\"Andrew Castillo\",\"Ania Grudzien\",\"Kayla McComb\"],[\"https://github.com/andrewcastil/finalproject\",\"https://github.com/jabunquin/edld651_finalproject/tree/main/scripts\",\"https://github.com/francesyess/EDLD651_final_v2\",\"https://github.com/apedraza1234/socialfear.git\",\"https://github.com/pfingston/data_final.git\",\"https://github.com/jabunquin/edld651_finalproject/tree/main/scripts\",\"https://github.com/francesyess/EDLD651_final_v2\",\"https://github.com/pfingston/data_final.git\",\"https://github.com/tracy-zehner/SubstanceAI.git\",\"https://github.com/jabunquin/edld651_finalproject/tree/main/scripts\",\"https://github.com/francesyess/EDLD651_final_v2\",\"https://github.com/ddjones-slp/final_project_651.git\",\"https://github.com/tracy-zehner/SubstanceAI.git\",\"https://github.com/apedraza1234/socialfear.git\",\"https://github.com/pfingston/data_final.git\",\"https://github.com/andrewcastil/finalproject\",\"https://github.com/andrewcastil/finalproject\",\"https://github.com/tracy-zehner/SubstanceAI.git\",\"https://github.com/apedraza1234/socialfear.git\",\"https://github.com/francesyess/EDLD651_final_v2\",\"https://github.com/tracy-zehner/SubstanceAI.git\",\"https://github.com/ddjones-slp/final_project_651.git\"],[\"Final_project.qmd\",\"finalproject.qmd\",\"edld651_final_v2.qmd\",\"manuscript.qmd\",\"manuscript.qmd\",\"finalproject.qmd\",\"edld651_final_v2.qmd\",\"manuscript.qmd\",\"SubstanceAI.qmd\",\"finalproject.qmd\",\"edld651_final_v2.qmd\",\"Final Project DJ Clean Data.qmd\",\"SubstanceAI.qmd\",\"manuscript.qmd\",\"manuscript.qmd\",\"Final_project.qmd\",\"Final_project.qmd\",\"SubstanceAI.qmd\",\"manuscript.qmd\",\"edld651_final_v2.qmd\",\"SubstanceAI.qmd\",\"Final Project DJ Clean Data.qmd\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Student<\\/th>\\n      <th>Repo to Review<\\/th>\\n      <th>File to Review<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n## 2. Fork the repo\n\n1. Navigate to the (host) GitHub repo\n2. Click Fork in the upper right corner\n3. Where to fork? – **your GitHub account**\n\n![](./images/gh_fork.png)\n\n## 3. Clone the repo \n\n(@) Clone the repo\n\ncopy the URL\n\n![](./images/gh_clone.png)\n\n## 3. Clone the repo \n\n(@) Open GitKraken\n\n*Clone with URL*\n\nWhere will it live on your local machine? It's own folder, with no other RProjects\n\n![](./images/gh_clone2.png)  \n\n## 4. Provide script feedback {.smaller}\n\n* Open `RProj` in your [local]{style='color:#009E73'} (i.e., on your machine)\n* Find the .Rmd document you will be reviewing\n   + it should be an.q md document\n* Make your edits/comments\n    + edit code as you like\n    + include a comment for each edit!\n    + Provide comments in code **and/or** text (`Ctrl/Command + Shift + C`)\n* Commit as you go (if you are working on this across sessions/days)\n* [Push]{style='color:#009E73'} only when you are finished**\n\n## 5. Create Pull Request (PR) {.smaller}\n\n(1) Navigate back to the (host) GitHub repo\n\n. . .\n\n(2) Click “Pull requests”\n\n![](./images/gh_pr.png)\n\n. . .\n\n(3) Click “New pull request”\n\n![](./images/gh_newpr.png)\n\n## 5. Create Pull Request (PR) {.smaller}\n\n(4) Click *\"Compare across forks\"*\n\n![](./images/gh_compareforks.png)\n\n. . .\n\nUse drop-downs so that:\n\n*  **left** = *host* repo\n*  **right**  = *your* repo\n\n![](./images/gh_compareforks2.png)\n. . .\n\nYou will be able view the changes you made to the .qmd document\n\n## 5. Create Pull Request (PR)\n\n(5) Click *\"Create pull request\"*\n\n![](./images/gh_comparechanges.png)\n\n## 5. Create Pull Request (PR) {.smaller}\n\nWrite a brief summary list of the PR that includes\n\n* \\>= 3 strengths\n* \\>= 1 thing you learned\n* 1 to 3 three areas of improvement\n* **Use markdown formatting, headers or list!**\n\n![](./images/gh_comparechanges.png)\n\n## 5. Create Pull Request (PR)\n\n(6) Click *\"Create pull request\"* when you're done\n\n![](./images/gh_comparechanges.png)\n\n## 5. Create Pull Request (PR) {.smaller}\n\nRecap\n\n(@) Navigate back to the (host) GitHub repo\n(@) Click *\"Pull requests\"*\n(@) Click *\"New pull request\"*\n(@) Click *\"Compare across forks\"*\n\n* Use drop-downs so that:\n    + Host [repo]{style='color:#009E73'} is on the left, your [repo]{style='color:#009E73'} is on the right\n* View changes\n\n(@) Click *\"Create pull request\"*\n* Write brief summary list of the [PR]{style='color:#009E73'} that includes\n    + \\>= 3 strengths\n    + \\>= 1 thing you learned\n    + 1 to 3 three areas of improvement\n    + **Use markdown formatting, headers, or list!**\n\n(@) Click *\"Create pull request\"*\n\n## Reviewing your PRs\n\nYou will get an email from GitHub\n\n1. Click on first link, for [PR]{style='color:#009E73'}\n2. Click *\"Commits\"* tab\n3. Click on *\"File changes\"* to see changes\n4. Copy/paste all desired changes\n5. Don’t close *\"Close PR\"* just yet; I want to review\n\n# Next time\n\n## Before next class\n\n* Final Project\n    + [Final Project: Peer Review of Script]{style='color:#FF0000'}\n    + [Final Project: Presentations]{style='color:#FF0000'} - email me your content before class\n* Homework\n    + **Homework 10**\n\n# AMA\n\n\n\n",
    "supporting": [
      "w9_factors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\r\n<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/datatables-binding-0.30/datatables.js\"></script>\r\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\r\n<link href=\"../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\r\n<link href=\"../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n"
      ],
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    // dispatch for htmlwidgets\r\n    function fireSlideEnter() {\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n    }\r\n\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n      fireSlideEnter();\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}