{
  "hash": "5ceaca5d79f19e6fd46381f0b5657408",
  "result": {
    "markdown": "---\ntitle: \"The Great Popcorn Experiment!\"\nauthor: \"Joe Nese and EDLD 651\"\ndate: \"9/27/2023\"\nformat: \n  html:\n    code-fold: true\nexecute: \n  echo: true\n  warning: false\nbibliography: popcorn_bib.bib\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\nlibrary(ggthemes)\nlibrary(ggrepel)\nlibrary(reactable)\nlibrary(parameters)\nlibrary(knitr)\n\ntheme_set(theme_minimal(base_size = 18))\n```\n:::\n\n\n# Introduction\n\nThis is the great popcorn experiment! An under-powered (mediocre) scientific replication of the famous historical event (folktale?) in statistics in which each person in town was asked to guess the weight of the ox. Having no knowledge of oxen, no person correctly guessed the weight, but the average of all guesses was within one pound of the ox's weight! What an inspiring story of collectivism, the strength in numbers, and the power of data, data science, and statistics! We are better together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntruth <- 3224\n\ndta <- read_csv(here(\"nopublish\", \"popcorn\", \"popcorn_data.csv\")) %>% \n  mutate(id = ifelse(uo_id %% 2 == 0, \"even\", \"odd\"),\n         initials = paste0(str_sub(first, 1, 1), str_sub(last, 1, 2)),\n         dist = guess - truth) %>% \n  select(-uo_id)\n\nansw <- tibble(\n  name = c(\"Class Mean\", \"Truth\"),\n  value = c(round(mean(dta$guess, na.rm = TRUE)), truth)\n)\n```\n:::\n\n\n# Method\n\nWe used the following packages: `ggrepel` [@ggrepel], `ggthemes` [@ggthemes], `here` [@here], `knitr` [@knitr], `parameters` [@parameters], `reactable` [@reactable], and `tidyverse` [@tidyverse].\n\n### Research Question\n\n1.  Is the average of the class's popcorn guesses closer to the actual number of popcorn kernels in the jar than any one person?\n\nOur hypothesis is that the class average will be more accurate than the guess of any one person.\n\n# Results\n\nFirst, let's look at a density plot, which shows the distribution of the class guesses.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta %>% \n  ggplot(aes(guess)) +\n  geom_density() +\n  geom_vline(xintercept = truth, color = \"magenta\", size = 2) +\n  geom_vline(xintercept = mean(dta$guess, na.rm = TRUE), size = 2) +\n  ggrepel::geom_label_repel(data = answ, aes(x = value, y = .0005, label = name)) +\n  theme(plot.title.position = \"plot\",\n        axis.text.y = element_blank()) +\n  labs(\n    x = \"Class Guesses\",\n    y = NULL,\n    title = \"Class Guesses\",\n    subtitle = \"Density Plot\"\n  )\n```\n\n::: {.cell-output-display}\n![](popcorn-experiment_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nAnd here is a table of the class guesses. You can filter and sort it!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta %>% \n  select(first, guess) %>% \n  reactable(filterable = TRUE, searchable = TRUE)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"reactable html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-857140bc87b473b06663\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-857140bc87b473b06663\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"first\":[\"JonBenedik\",\"Shane\",\"Elyse\",\"Andrew\",\"Meagan\",\"Raleigh\",\"Ania\",\"Nafisul\",\"Yitong\",\"Danielle\",\"Eunji\",\"Xiaoqi\",\"Kayla\",\"Alejandra\",\"Katie\",\"Leah\",\"Ben\",\"Alexus\",\"Audrey\",\"Shannan\",\"Irina\",\"Avery\",\"Jamie\",\"Tracy\",\"Tingyu\"],\"guess\":[1938,4997,4484,2531,3917,2228,4478,2652,4387,2904,2595,4888,2285,2138,2578,4648,3616,3668,1281,2453,1123,4752,1688,1035,4159]},\"columns\":[{\"id\":\"first\",\"name\":\"first\",\"type\":\"character\"},{\"id\":\"guess\",\"name\":\"guess\",\"type\":\"numeric\"}],\"filterable\":true,\"searchable\":true,\"dataKey\":\"75bfa106ed33a306dd35b9fbf3e7d971\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nHere is another cool data visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta %>% \n  ggplot(aes(guess, reorder(first, guess), group = 1)) +\n  geom_point(size = 2.5) +\n  geom_segment(aes(x = 0, xend = guess, y = first, yend = first), color = \"cornflowerblue\") +\n  geom_vline(xintercept = truth, color = \"magenta\", size = 2) +\n  geom_vline(xintercept = mean(dta$guess, na.rm = TRUE), size = 2) +\n  geom_label_repel(data = answ, aes(x = value, y = 2, label = name)) +\n  theme(plot.title.position = \"plot\") +\n  labs(\n    x = \"Class Guesses\",\n    y = NULL,\n    title = \"A Cool Figure\"\n  )\n```\n\n::: {.cell-output-display}\n![](popcorn-experiment_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nOr perhaps my favorite:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta %>% \n  ggplot(aes(dist, reorder(first, dist))) +\n  geom_col(aes(fill = ifelse(dist > 0, \"plus\", \"minus\"))) +\n  geom_vline(xintercept = 0, color = \"magenta\", size = .5) +\n  geom_vline(xintercept = mean(dta$guess, na.rm = TRUE) - truth, size = 2) +\n  ggrepel::geom_label_repel(data = filter(answ, name == \"Class Mean\"), \n                            aes(x = value - truth, y = -1, label = name),\n                            min.segment.length = 0) +\n  ggthemes::scale_fill_colorblind() +\n  theme(legend.position=\"none\",\n        plot.title.position = \"plot\") +\n  labs(\n    x = \"Guesses Distance from Truth\",\n    y = NULL,\n    title = \"Distance from Truth\"\n  )\n```\n\n::: {.cell-output-display}\n![](popcorn-experiment_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow let's get to the results...\n\nThe actual number of popcorn kernels in the jar was **3,224**.\n\nThe person closest to the truth was **Danielle** with a guess of **2,904** kernels - off by 320 kernels!\n\nThe class mean was **3,097** (*SD* = 1,266) - off by 127 kernels.\n\nSo to answer our research question...\n\n\n\n```{.r .cell-code}\nif(abs(mean(dta$guess, na.rm = TRUE) - truth) < abs(slice(dta, which.min(abs(dist))) %>% pull(guess) - truth)) {\n   cat(\"Hypothosis confirmed! The class average was more accurate than any one person!\")\n} else if (abs(mean(dta$guess, na.rm = TRUE) - truth) > abs(slice(dta, which.min(abs(dist))) %>% pull(guess) - truth)) {\n   cat(paste0(\"**Hypthosis rejected! \", slice(dta, which.min(abs(dist))) %>% pull(first), \"'s guess was closer than the class average! Replication crisis?**\")) \n} else if (abs(mean(dta$guess, na.rm = TRUE) - truth) == abs(slice(dta, which.min(abs(dist))) %>% pull(guess) - truth)) {\n  cat(paste0(\"What?! It was a tie! \", slice(dta, which.min(abs(dist))) %>% pull(first), \"'s guess was the same as the class average!\"))\n}\n```\n\nHypothosis confirmed! The class average was more accurate than any one person!\n\n\n# Discussion\n\nWait! I'm having fun with this, so let's look at major and ID number!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndta_smry <- dta %>% \n  group_by(major) %>% \n  summarize(mean_guess = mean(guess, na.rm = TRUE))\n\nggplot(dta, aes(guess, fct_reorder(major, guess), group = major)) +\n  geom_point() +\n  stat_summary(fun = \"mean\", \n               geom = \"crossbar\",\n               width = .5,\n               color = \"red\") +\n  geom_vline(xintercept = truth, color = \"magenta\", size = 1) +\n  labs(\n    x = \"Kernel Guess\",\n    y = \"Major\",\n    title = \"Guesses by Major\"\n  ) +\n  theme(plot.title.position = \"plot\")\n```\n\n::: {.cell-output-display}\n![](popcorn-experiment_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(dta, aes(guess, id, group = id)) +\n  geom_point() +\n  stat_summary(fun = \"mean\", \n               geom = \"crossbar\",\n               width = .5,\n               color = \"red\") +\n  geom_vline(xintercept = truth, color = \"magenta\", size = 1) +\n  labs(\n    x = \"UO ID\",\n    y = \"Kernel Guess\",\n    title = \"Guesses by UO ID\"\n  ) +\n  theme(plot.title.position = \"plot\")\n```\n\n::: {.cell-output-display}\n![](popcorn-experiment_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nLet's run (bad) a regression!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm1 <- lm(dist ~ major + id, data = dta)\n\nmodel_parameters(m1) %>%\n  as_tibble() %>% \n  select(-c(CI, df_error, t)) %>% \n  mutate(across(c(2:5), ~round(., 1)),\n         p = round(p, 3)) %>% \n  kable(booktabs = TRUE,\n        align = c(\"l\", \"r\", \"r\", \"r\", \"r\", \"r\"),\n        caption = \"These are the Regression Results\")\n```\n\n::: {.cell-output-display}\nTable: These are the Regression Results\n\n|Parameter   | Coefficient|     SE|  CI_low| CI_high|     p|\n|:-----------|-----------:|------:|-------:|-------:|-----:|\n|(Intercept) |       445.8| 1441.6| -2646.2|  3537.8| 0.762|\n|majorCMSD   |       538.7| 1529.4| -2741.6|  3819.0| 0.730|\n|majorEPLD   |      -326.0| 1857.4| -4309.7|  3657.7| 0.863|\n|majorESSP   |     -1216.8| 1950.2| -5399.5|  2965.9| 0.543|\n|majorMPA    |     -1017.8| 1950.2| -5200.5|  3164.9| 0.610|\n|majorPRVD   |      -297.9| 1498.2| -3511.1|  2915.3| 0.845|\n|majorPS     |     -1781.0| 1857.4| -5764.7|  2202.7| 0.354|\n|majorPSY    |       118.4| 1427.0| -2942.2|  3178.9| 0.935|\n|majorSOC    |     -1373.9| 1635.8| -4882.3|  2134.5| 0.415|\n|majorSPED   |       558.9| 1498.2| -2654.4|  3772.1| 0.715|\n|idodd       |      -765.8|  594.5| -2040.8|   509.2| 0.219|\n:::\n:::\n\n\n# References\n",
    "supporting": [
      "popcorn-experiment_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\r\n<script src=\"../../site_libs/react-17.0.0/react.min.js\"></script>\r\n<script src=\"../../site_libs/react-17.0.0/react-dom.min.js\"></script>\r\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\r\n<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/reactable-0.4.4/reactable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/reactable-binding-0.4.4/reactable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}