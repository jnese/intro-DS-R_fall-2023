---
title: "Week 6: Quarto"
author: "Joe Nese"
institute: "University of Oregon<br>Fall 2023"
format:
  revealjs: 
    theme: default
    highlight-style: github
    incremental: false
    fig-width: 9
    fig-height: 3.5
    scrollable: true
    multiplex: true
execute: 
  echo: true
  warning: false
---

```{r setup, include=FALSE}

library(tidyverse)
library(knitr)
library(here)
library(kableExtra)
library(gt)
library(palmerpenguins)
library(DT)
library(reactable)
library(gtsummary)

```

# R Markdown

Week 5

## Agenda {.smaller}

* Quarto basics
* YAML options
* Chunk Options
* Inline Code

**Learning Objectives**

* Understand how to render Quarto documents and mix code with text
* Understand different chunk options
* Understand inline code evaluation

## What is Quarto? {.smaller}

- an open-source scientific and technical publishing system
- create dynamic content with Python, R, Julia, and Observable.
- publish reproducible, production quality articles, presentations, websites, blogs, and books in HTML, PDF, MS Word, ePub, etc.
- include equations, citations, crossrefs, figure panels, callouts, advanced layout, etc.
- a multi-language, next generation version of R Markdown (from Posit)
- includes many built in output formats (and options for customizing each)
- has native features for special project types like Websites, Books, and Blogs (rather than relying on external packages)
- everything

##

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/c2ef45f1-4a68-4c7a-a43f-bdcf0f90e104_rw_1920.png?h=89c4f4138772e8b374e21a814cc91b2f)

::: aside
Credit [Allison Horst](https://allisonhorst.com/data-science-art)
:::

## Formats

* Quarto will render to HTML and PDF really well 
* Word also supported
* You can also create presentations (slides), websites, books, etc.

## PDF Engines {.smaller}

- You need a tex (pronounced tek) distribution 
- Pandoc supports the use of a wide range of TeX distributions (pdflatex, xelatex, lualatex, tectonic, latexmk)
- I strongly recommend the use of [**TinyTeX**](https://yihui.org/tinytex/), which is a distribution of [TeX Live](https://tug.org/texlive/) that provides a reasonably sized initial download (~100 MB) that includes the 200 or so most commonly used TeX packages for Pandoc documents.

## PDF Engines

For this class, and probably everything you'll ever need: `TinyTex`

To install TinyTeX, use the following command in your **Terminal**:

`quarto install tinytex`

. . .

![](./images/terminal1.PNG)

## [Managing TeX](https://quarto.org/docs/output-formats/pdf-engine.html#managing-tex)

![](./images/terminal2.PNG)

## Note {.smaller}

Each year in April, TeXlive updates their remote package repository to the new year’s version of TeX. When this happens, previous year installations of TeX will not be able to download and install packages from the remote repository. When this happens, you may see an error like:

> Your TexLive version is not updated enough to connect to the remote repository and download packages. Please update your installation of TexLive or TinyTex.

When this happens, you can use `quarto update tinytex` to download and install an updated version of `tinytex`

## R Markdown aside

![](./images/rmd_0.png)

## Quarto

From within a RStudio Project, open a new Quarto file

:::: {.columns}

::: {.column width="50%"}
![](./images/qmd1.PNG)

:::

::: {.column width="50%" .fragment}
![](./images/qmd2.png)
:::

::::

## Quarto

From within a RStudio Project, open a new Quarto file

:::: {.columns}

::: {.column width="50%"}
![](./images/qmd1.PNG)

:::

::: {.column width="50%" .fragment}
![](./images/qmd2b.PNG)
:::

::::

## Let's render!

![](./images/qmd3.png)

## YAML Front Matter {.smaller}

```{r, eval=FALSE}
---
title: "World Changing Research"
format: html
---
```

* Yet Another Markup Language?
* Three dashes `---` before and after the YAML fields
    + Start with the default YAML
* Case sensitive
* Format sensitive (spaces & tab) - _very sensitive_
* *Many* other fields are possible
    + For example, you may want to include an argument for `format:` `pdf`, `html`, `docx`
    + Must be specified as it is rendered, if not supplied
* Full list [here](https://quarto.org/docs/reference/formats/html.html) (there's a lot)

## Authoring

```{r, eval=FALSE}
#| code-line-numbers: "|2|3|4|5|6|7|8"

---
title: "World Changing Research"
subtitle: "Seriously, it's really good research"
author: "Joe Nese"
date: "2023-5-25"
abstract: "Summary of document"
abstract-title: "Lable abstract"
doi: "digitil object identifier"
format: html
---
```

## Code Execution

Set the default behavior for all code chunks in the script with `execute`

```{r eval=FALSE}
#| code-line-numbers: "|5,6,7"

---
title: "World Changing Research"
author: "Joe Nese"
format: html
execute:
  eval: true
  echo: false
---
```

## `execute`

```{r, echo=FALSE}
yamlopts <- tibble::tribble(
                   ~Options,                        ~Arguments, ~Default,                                 ~Effect,
                   "`eval`",          "`true`, `false`, `[…]`", "`true`",                    "Evaluate the code?",
                   "`echo`", "`true`, `false`, `fence`, `[…]`", "`true`",                        "Show the code?",
                "`warning`",                         "logical", "`true`",                       "Print warnings?",
                  "`error`",                         "logical", "`true`",         "Include errors in the output?",
                "`include`",                         "logical", "`true`", "Prevent any output (code or results)?",
                 "`output`",         "`true`, `false`, `asis`", "`true`",                 "Include code results?"
                ) 

fx_tbl_opts <- function(x){
  x %>% 
    gt() %>%
    fmt_markdown(columns = everything()) %>% 
    tab_style(
      style = list(
        cell_fill(color = "white")
        ),
      locations = cells_body(
        rows = everything())
    )
}

yamlopts %>% 
  fx_tbl_opts()

```

## `eval` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 1)
  )
```

* `eval`uates code
* if `false` it just echos the code into output

## `echo` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 2)
  )
```

* show (`echo`) source code in rendered output
* `echo: false` is most useful when producing a report for somebody who doesn't use `R` and has no use for, or knowledge of, the code

## `warning` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 3)
  )
```

* include `warning`s in rendered output

## `error` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 4)
  )
```

* Include errors in the output 
* If `false`, then errors executing code will  halt processing of the document

## `include` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 5)
  )
```

* Code will execute, but neither code or results will show in the output

## `output` {.smaller}

```{r, echo=FALSE}
yamlopts %>%
  fx_tbl_opts() %>% 
  tab_style(
    style = list(
      cell_fill(color = "#F0E442")
      ),
    locations = cells_body(
      rows = 6)
  )
```

* Include the results of executing the code in the output. Possible values:
    + `true`: show results
    + `false`: do not show results
    + `asis`: output as raw markdown; use for rendering tables!
    
## figures

So many options for figures. 

One is to set figure width/height

```{r eval=FALSE}
#| code-line-numbers: "|7,8"

---
title: "World Changing Research"
format: html
execute:
  eval: true
  echo: false
fig-width: 6.5
fig-height: 8
---
```

## Syntax Highlighting {.smaller}

* The YAML will control a lot of how a document looks 
* For example, if you wanted to render with a different [syntax highlighter](https://bookdown.org/yihui/rmarkdown/html-document.html)

:::: {.columns}

::: {.column width="50%"}
standard
<br>
```{r, eval=FALSE, echo=TRUE}
---
title: "Doc Title"
format: pdf
---
```
<br>
![](./images/rmd_10.png)
:::

::: {.column width="50%" .fragment}
`kate`
<br>
```{r, eval=FALSE, echo=TRUE}
---
title: "Doc Title"
format: 
  pdf:
    highlight-style: kate
---
```
<br>
![](./images/rmd_11.png)

:::

::::

## Table of Contents

* Specify a table of contents in the YAML
* A table of contents will be automatically generated for you based on your **headers**

\# Header 1
<br>
\#\# Header 2

```{r, eval=FALSE}
#| code-line-numbers: "|4"

---
format: 
  html:
    toc: true
---
```

## TOC - change depth

* By default, the TOC will only go down to 3 levels
* Change that with `toc-depth:`

```{r, eval=FALSE}
#| code-line-numbers: "|5"

---
format: 
  html:
    toc: true
    toc-depth: 5
---
```

## TOC - location {.smaller}

* For **HTML** format by default floats the table of contents to the right
* The floating TOC can be used to navigate to sections of the document and also will automatically highlight the appropriate section as the user scrolls 
* The table of contents is responsive and will become hidden once the viewport becomes too narrow
* You can alternatively position it at the `left` or in the `body`

```{r, eval=FALSE}
#| code-line-numbers: "|5"

---
format: 
  html:
    toc: true
    toc-location: left
---
```

## TOC - title

You can customize the title used for the table of contents using the `toc-title` option

```{r, eval=FALSE}
#| code-line-numbers: "|5"

---
format: 
  html:
    toc: true
    toc-title: Contents
---
```

## Code Folding

* Use the `code-fold` option to include code but have it hidden by default
* Use custom text for the code display button (the default is just "Code")


```{r, eval=FALSE}
#| code-line-numbers: "|4|5"

---
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---
```

[Popcorn Experiment]{style='color:#D55E00'}

## Code Chunks vs. Text

![](./images/qmd4.png)

## Code Chunks

Start a code chunk with ````{r} `

Then produce some `R` code

then close the chunk with three additional back ticks ```` `

<b> OR </b>

<b>Dropdown</b>: *Code* ⬇️ *Insert Chunk*

<b>Shortcut</b>: `Ctrl/Command + Alt + I`

```{r}
#| echo: fenced
a <- 22
b <- 7

a / b
```

## Chunk Names

* Use single word: `chunk1`
* Or use hyphen (`-`) to separate words: `chunk-1` 
* Do **not** use spaces: ~~`chunk 1`~~
* Do **not** use underscore ~~`chunk_1`~~
* Chunk names can only be used **once**

. . .

Think kebabs, not snakes

* `bar-plot-1`
* `bar-plot-2`
* `hist-plot-1`
* `model-1`

::: aside
[Allison Hill](https://apreshill.github.io/rmd4cdc/#100)
:::

## [Headers](https://quarto.org/docs/authoring/markdown-basics.html#headings)

Great for organizing text **and** code

\# Level 1
<br>
\#\# Level 2
<br>
\#\#\# Level 3

![](./images/qmd5.png)

## [Lists](https://quarto.org/docs/authoring/markdown-basics.html#lists)<sup>^</sup>

Note that lists require an entire blank line above the list, otherwise it will appear as normal text along a single line and **not** rendered in list form 

![](./images/qmd5.png)
::: aside
<sup>^</sup> not an `R` vector list
:::

# More Advanced Options

* chunk options
* setting global options
* inline code evaluation

# Chunk Options

## Chunk Options

Chunk options are typically included in special comments at the top of code chunks

`#|` (think hash pipe?)

This is how you override the global options within a particular chunk

```{r}
#| echo: fenced
#| eval: false

# comment
a <- 22
a / 7
```

## Revisit

```{r, echo=FALSE}
yamlopts %>% 
  fx_tbl_opts()
```

## A Few More Chunk Options

`label`
: chunk name (or label)

`message`
: include messages in rendered output?

## `echo` and `eval`

:::: {.columns}

::: {.column width="50%"}

`echo: false`

evaluate code without showing it <br>

Text here...
```{r}
#| echo: false

a <- 22
a / 7
```

more text here
:::

::: {.column width="50%" .fragment}

`eval: false`

show code without evaluating it <br>

Text here...
```{r}
#| echo: fenced
#| eval: false
a <- 22
a / 7
```
<br>
more text here
:::

::::

## `warning: false`

Warning is **not** printed to the console when rendering

```{r}
#| echo: fenced
#| warning: false
ggplot(msleep, aes(sleep_rem, sleep_total)) + 
  geom_point()
```

## `warning: true`

Warning **is** printed to the console when rendering

```{r}
#| echo: fenced
#| warning: true
ggplot(msleep, aes(sleep_rem, sleep_total)) + 
  geom_point()
```

## `error: true`

This will show errors in the rendered document

```{r}
#| echo: fenced
#| error: true

ggplot(msleep, aes(sleep_rem, sleep_total)) + 
  geom_point())
```

## `error: false`

The document won't render if it encounters an error

![](./images/qmd9.png)



